@model ExamAndQuiz.Models.ExamRule

@{
    ViewBag.Title = "Yenilə";
    Layout = "~/Views/Shared/_LayoutBack.cshtml";
}

<h2>Yenilə</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ID)

        <div class="form-group">
            @Html.LabelFor(model => model.Qayda, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <textarea id="editor" name="@Html.NameFor(model => model.Qayda)">@Model.Qayda</textarea>
                @Html.ValidationMessageFor(model => model.Qayda, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="row">
            <div class="col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Sira, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Sira, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Sira, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-lg-2">
                <div class="form-group">
                    @Html.LabelFor(model => model.Cap, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="checkbox">
                            @Html.EditorFor(model => model.Cap)
                            @Html.ValidationMessageFor(model => model.Cap, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-2">
                <div class="form-group">
                    @Html.LabelFor(model => model.Elan, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="checkbox">
                            @Html.EditorFor(model => model.Elan)
                            @Html.ValidationMessageFor(model => model.Elan, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
        </div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Yenilə" class="btn btn-outline-info" />
                <a href="/ExamRule/Index" class="btn btn-outline-dark">Geri</a>
            </div>
        </div>
    </div>
}

<script src="https://cdn.tiny.cloud/1/no-api-key/tinymce/5/tinymce.min.js" referrerpolicy="origin"></script>

<script>
    tinymce.init({
        selector: '#editor',
        menubar: false,
        plugins: "link code emoticons hr lists charmap table media",
        external_plugins: { tiny_mce_wiris: 'https://www.wiris.net/demo/plugins/tiny_mce/plugin.js' },
        fontsize_formats: "8pt 10pt 12pt 13pt 14pt 18pt 24pt 36pt",
        toolbar1: 'undo redo  |  fontsizeselect | bold italic underline strikethrough | superscript subscript |bullist numlist | removeformat| alignleft aligncenter alignright alignjustify | forecolor',
        toolbar2: 'outdent indent | link emoticons charmap hr | code ',
        // enable automatic uploads of images represented by blob or data URIs
        automatic_uploads: true,
        // add custom filepicker only to Image dialog
        file_picker_types: 'image',
        file_picker_callback: function (cb, value, meta) {
            var input = document.createElement('input');
            input.setAttribute('type', 'file');
            input.setAttribute('accept', 'image/*');

            input.onchange = function () {
                var file = this.files[0];
                var reader = new FileReader();

                reader.onload = function () {
                    var id = 'blobid' + (new Date()).getTime();
                    var blobCache = tinymce.activeEditor.editorUpload.blobCache;
                    var base64 = reader.result.split(',')[1];
                    var blobInfo = blobCache.create(id, file, base64);
                    blobCache.add(blobInfo);

                    // call the callback and populate the Title field with the file name
                    cb(blobInfo.blobUri(), { title: file.name });
                };
                reader.readAsDataURL(file);
            };

            input.click();
        }

    });
</script>
